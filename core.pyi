from typing import Any, Optional, Union, overload, TypeVar

from .containers import TList
from . import RDF

RObject = TypeVar('RObject', bound=TObject)


class TObject:
    def ClassName(self) -> str:
        """
        Return the name of the class.
        """
        ...
    
    def Draw(self, option: str = "") -> None:
        """
        Default Draw method for all objects.
        """
        ...
    def GetTitle(self) -> str:
        """
        Returns title of object.

        This default method returns the class title (i.e. description).
        Classes that give objects a title should override this method. 
        """
        ...
    def SaveAs(self, filename: str, option: str = "") -> None:
        """
        Save this object in the file specified by filename.

            - if `filename` contains `.root` the object is saved in filename as root binary file.
            - if `filename` contains `.xml` the object is saved in filename as a xml ascii file.
            - if `filename` contains `.cc` the object is saved in filename as C code independant
              from ROOT. The code is generated via `SavePrimitive()`. Specific code should be implemented
              in each object to handle this option. Like in `TF1.SavePrimitive()`.

        otherwise the object is written to filename as a CINT/C++ script. The C++ code to rebuild
        this object is generated via `SavePrimitive()`. The "option" parameter is passed to `SavePrimitive`.
        By default it is an empty string. It can be used to specify the `Draw` option in the code generated by
        `SavePrimitive`.

        The function is available via the object context menu.
        """
        ...
    @overload    
    def FindObject(self, name: str) -> Optional['TObject']:
        """
        Must be redefined in derived classes.

        This function is typically used with TCollections,
        but can also be used to find an object by name inside this object. 
        
        Parameters
        ----------
        name : str
            The name of the object to find.
        
        Returns
        -------
        TObject | None
            The found object or None if not found.
        """
        ...
    @overload
    def FindObject(self, obj : RObject) -> RObject:
        """
        Must be redefined in derived classes.

        This function is typically used with TCollections,
        but can also be used to find an object by name inside this object. 
        
        Parameters
        ----------
        obj : TObject
            The type of the object to find.
        
        Returns
        -------
        TObject | None
            Object with the same type as the one provided.
        """
        ...

class TAttLine:
    @overload
    def SetLineColor(self, color: int):
        """
        Set the line color.
        """
        ...
    @overload
    def SetLineColor(self, color: 'TColorNumber'):
        """
        Set the line color using a TColorNumber.
        """
        ...
    def SetLineColorAlpha(self, color: int, alpha: float) -> None:
        """
        Set the line color with transparency.
        
        Parameters
        ----------
        color : int
            The color to set.
        alpha : float
            The transparency level (0.0 to 1.0).
        """
        ...

class TAttFill:
    def SetFillStyle(self, style : int) -> None:
        """
        Set the fill area style.
        
        Conventions for fill styles
        ----------------------------
        `0` : hollow
        `1001` : Solid
        `3000+pattern_number` (see below)
        
        For `TPad` only:
            `4000` :the window is transparent.

            `4000` to `4100` the window is 100% transparent to 100% opaque.

            The pad transparency is visible in binary outputs files like gif, jpg, png etc ..
            but not in vector graphics output files like PS, PDF and SVG. This convention
            (fill style > 4000) is kept for backward compatibility. It is better to use the color
            transparency instead.

        pattern_number can have any value from 1 to 25 (see table), or any value from 100 to 999. 
        For the latest the numbering convention is the following:
        ```
        pattern_number = ijk      (FillStyle = 3ijk)
 
        i (1-9) : specify the space between each hatch
                1 = 1/2mm  9 = 6mm
        
        j (0-9) : specify angle between 0 and 90 degrees
                0 = 0
                1 = 10
                2 = 20
                3 = 30
                4 = 45
                5 = Not drawn
                6 = 60
                7 = 70
                8 = 80
                9 = 90
        
        k (0-9) : specify angle between 90 and 180 degrees
                0 = 180
                1 = 170
                2 = 160
                3 = 150
                4 = 135
                5 = Not drawn
                6 = 120
                7 = 110
                8 = 100
                9 = 90
        ```
        """
        ...
    @overload
    def SetFillColor(self, color: int) -> None:
        """
        Set the fill area color.

        Parameters
        ----------
        color : int
            The color to set.
        """
        ...
    @overload
    def SetFillColor(self, color: 'TColorNumber') -> None:
        """
        Set the fill area color using a TColorNumber.

        Parameters
        ----------
        color : TColorNumber
            The color to set.
        """
        ...
    def SetFillColorAlpha(self, fcolor: Union[int, 'TColorNumber'], falpha: float) -> None:
        """
        Set a transparent fill color.
        
        Parameters
        ----------
        fcolor : int | TColorNumber
            Defines the fill color.
        falpha : float
            Defines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). 
        """
        ...
class TVirtualPad(TObject, TAttFill):
    def GetListOfPrimitives(self) -> 'TList[TVirtualPad]':
        """
        Return the list of primitives in this pad.
        
        The list of primitives is a `TList` containing all objects drawn in this pad.
        """
        ...


class TNamed(TObject):
    def GetName(self) -> str:
        """
        Return the name of the object.
        """
        ...


class TNamed(TObject):
    def GetName(self) -> str:
        """
        Return the name of the object.
        
        This default method returns the class name. Classes that give objects a name should override this method. 
        """
        ...
    def SetName(self, name: str) -> None:
        """
        Set the name of the TNamed.

        WARNING: if the object is a member of a THashTable or THashList
        container the container must be Rehash()'ed after SetName(). For
        example the list of objects in the current directory is a THashList.
        """
        ...
    def SetTitle(self, title: str) -> None:
        """
        Set the title of the object.
        """
        ...
class TAttAxis:
    pass

class TAttLine:
    @overload
    def SetLineColor(self, color: int) -> None:
        """
        Set the line color.
        
        Parameters
        ----------
        color : int
            The color to set.
        """
        ...
    @overload
    def SetLineColor(self, color: 'TColorNumber') -> None:
        """
        Set the line color using a TColorNumber.
        
        Parameters
        ----------
        color : TColorNumber
            The color to set.
        """
        ...
    def SetLineColorAlpha(self, color: Union[int, 'TColorNumber'], alpha: float) -> None:
        """
        Set the line color with transparency.
        """
        ...
    def SetLineWidth(self, width: int) -> None:
        """
        Set the line width.
        
        Parameters
        ----------
        width : int
            The width of the line in pixels.
        """
        ...
    def SetLineStyle(self, style: int) -> None:
        """
        Set the line style.
        
        Parameters
        ----------
        style : int
            The line style to set. Common styles are:
            - 1: solid
            - 2: dashed
            - 3: dotted
            - 4: dash-dot
            - 5: long dash-dot
            - 6: dash-dot-dot-dot
            - 7: long dash
            - 8: dash-dot-dot
            - 9: longer dash
            - 10: long dash-dot
        """
        ...
    def SetLineStyleString(self, i : int, text : str) -> None:
        """
        Set the line style string.
        
        Parameters
        ----------
        i : int
            The index of the line style to set.
        text : str
            The string representation of the line style.
            The string defines the dash length and the gap length. For example:
            - 1 (solid): ""
            - 2 (dashed): "12 12"
            - 3 (dotted): "4 8"
            - 4 (dash-dot): "12 16 4 16"
            - 5 (long dash-dot): "20 12 4 12"
            - 6 (dash-dot-dot-dot): "20 12 4 12 4 12 4 12"
            - 7 (long dash): "20 20"
            - 8 (dash-dot-dot): "20 12 4 12 4 12"
            - 9 (longer dash): "80 20"

        Notes
        -----
        - Up to 30 different styles may be defined.
        - The opening and closing brackets may be omitted
        - It is recommended to use 4 as the smallest segment length and multiple of 4 for other lengths.
        - The line style 1 to 10 are predefined. 1 to 4 cannot be changed.

        """
        ...
class TAttMarker:
    @overload
    def SetMarkerColor(self, color: int = 1) -> None:
        """
        Set the marker color.
        
        Parameters
        ----------
        color : int
            The color to set.
        """
        ...
    @overload
    def SetMarkerColor(self, color: 'TColorNumber') -> None:
        """
        Set the marker color using a TColorNumber.
        
        Parameters
        ----------
        color : TColorNumber
            The color to set.
        """
        ...
    def SetMarkerColorAlpha(self, mcolor: Union[int, 'TColorNumber'], malpha: float) -> None:
        """
        Set a transparent marker color.
        
        Parameters
        ----------
        mcolor : int | TColorNumber
            Defines the marker color.
        malpha : float
            Defines the percentage of opacity from 0. (fully transparent) to 1. (fully opaque). 
        """
        ...

class TColorNumber(TNamed):
    pass


class TColor(TNamed):
    """
    The color creation and management class.
    """
    @overload
    def __init__(self, color: int, r: float, g: float, b: float, name :str = "", a :float = 1) -> None:
        """
        Normal color constructor.

        Initialize a color structure. Compute the RGB and HLS color components.
        The color title is set to its hexadecimal value. 
        
        Parameters
        ----------
        number : int
            The color number.
        r : float
            Red component (0.0 to 1.0).
        g : float
            Green component (0.0 to 1.0).
        b : float
            Blue component (0.0 to 1.0).
        name : str, optional
            The name of the color. Defaults to an empty string.
        a : float, optional
            Alpha transparency (default is 1.0, fully opaque).
        """
        ...
    @overload
    def __init__(self, r : float, g : float, b : float, a : float = 1) -> None:
        """
        Fast TColor constructor.

        It creates a color with an index just above the current highest one.
        It does not name the color. This is useful to create palettes.
        
        Parameters
        ----------
        r : float
            Red component (0.0 to 1.0).
        g : float
            Green component (0.0 to 1.0).
        b : float
            Blue component (0.0 to 1.0).
        a : float, optional
            Alpha transparency (default is 1.0, fully opaque).
        """
    @overload
    def __init__(self, color: 'TColor') -> None:
        """
        Color copy constructor.
        """
        ...
    @staticmethod
    def GetFreeColorIndex() -> int:
        """
        Returns the free color index greater than
        the highest defined color index.

        All the color indices after this index are also free.
        It can be used to define a user custom color.
        """
        ...
    @overload
    @staticmethod
    def GetColor(color: str) -> 'TColorNumber':
        """
        Static method returning color number for color specified by hex
        color string of form: "#rrggbb", where rr, gg and bb are in hex between [0,FF], e.g.

        "#c0c0c0". Also alpha channel is applied when hex string includes fourth number e.g "#c0c0c0ff"

        The color retrieval is done using a threshold defined by SetColorThreshold.

        If specified color does not exist it will be created with as name "#rrggbb" with rr,
        gg and bb in hex between [0,FF]. 
        """
        ...
    @overload
    @staticmethod
    def GetColor(r : float, g : float, b : float, a : float = 1) -> 'TColorNumber':
        """
        Static method returning color number for color specified by r, g and b.

        The r,g,b should be in the range [0,1].

        The color retrieval is done using a threshold defined by SetColorThreshold.

        If specified color does not exist it will be created with as name "#rrggbb"
        with rr, gg and bb in hex between [0,FF].
        """
        ...
    @overload
    @staticmethod
    def GetColor(r : int, g : int, b : int, a : float = 1) -> 'TColorNumber':
        """
        Static method returning color number for color specified by r, g and b.

        The r,g,b should be in the range [0,255].

        The color retrieval is done using a threshold defined by SetColorThreshold.

        If specified color does not exist it will be created with as name "#rrggbb"
        with rr, gg and bb in hex between [0,FF].
        """
        ...